generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

enum Verdict {
  AC // Accepted
  WA // Wrong Answer
  TLE // Time Limit Exceeded
  MLE // Memory Limit Exceeded
  SKP // Skipped
  RE // Runtime Error
  CE // Compilation Error

  RN // Running
  WJ // Waiting Judge
  PD // Pending

  JE // Judge Error
  SE // System Error
}

enum Language {
  c
  cpp
  python
}

enum Visibility {
  public
  private
}

model User {
  id          Int          @id @default(autoincrement())
  username    String       @unique
  password    String
  role        Role         @default(user)
  displayName String
  image       String?
  bio         String?
  sessions    Session[]
  Problem     Problem[]
  Submission  Submission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Session {
  id        String   @id
  userId    Int
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model Problem {
  id          Int          @id @default(autoincrement())
  title       String
  visibility  Visibility   @default(private)
  timeLimit   Int
  memoryLimit Int
  testcases   Int
  authorId    Int
  author      User         @relation(fields: [authorId], references: [id])
  Submission  Submission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("problems")
}

model Submission {
  id        Int       @id @default(autoincrement())
  code      String
  lang      Language
  verdict   Verdict[]
  time      Int[]
  memory    Int[]
  problemId Int
  userId    Int
  problem   Problem   @relation(fields: [problemId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("submissions")
}
